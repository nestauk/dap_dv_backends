export const getRequestAuthSchema = {
	summary: 'Request an authentication token for the provided email',
	description: 'Request an authentication token for the provided email. The email must be registered with Nesta, i.e. must end with @nesta.org.uk',
	produces: ['text/plain'],
	query: {
		required: ['email'],
		type: 'object',
		properties: {
			email: {
				type: 'string',
				description: 'Your Nesta email, ending in @nesta.org.uk'
			}
		}
	},
	response: {
		204: {
			type: 'null',
			description: 'The authentication token has been succesfully generated and an email was sent.'
		},
		400: {
			type: 'string',
			description: 'Error message'
		}
	}
};

export const getProvideSchema = {
	summary: 'Provides a token to the user.',
	description: 'Provides a token to the user. Endpoint is used to prove that the user does in fact have access to the provided Nesta email.\n\nThe most likely usage is by simpling clicking the link that was automatically generated in the email sent to you.',
	query: {
		type: 'object',
		required: ['email', 'token'],
		properties: {
			email: {
				type: 'string',
				description: 'Email used in the /request endpoint.',
			},
			token: {
				type: 'string',
				description: 'Token sent to your email after having requested it using the /request endpoint.'
			}
		}
	},
	produces: ['text/plain'],
	response: {
		200: {
			content: {
				'text/plain': {
					schema: {
						type: 'string',
						example: 'success'
					}
				}
			}
		}
	}
};

export const getAuthenticateSchema = {
	summary: 'Check if token is valid for an email',
	description: 'Check if the token and email pair have been authenticated.',
	query: {
		required: ['email', 'token'],
		type: 'object',
		properties: {
			email: {
				type: 'string',
				description: 'A Nesta email',
			},
			token: {
				type: 'string',
				description: 'A token generated by the /request endpoint'
			}
		}
	},
	response: {
		200: {
			type: 'boolean'
		}
	}
};
