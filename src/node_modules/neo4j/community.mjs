import * as _ from 'lamb';

import { getSession } from 'neo4j/driver.mjs';
import { promisify } from 'neo4j/util.mjs';

export const getMetadata = data => {
	const intermediateCommunities = data[0].intermediateCommunityIds.length;
	const communityCount = _.keys(_.group(data, _.getKey('community'))).length;
	const intermediateCounts = _.map(
		_.range(0, intermediateCommunities),
		idx => {
			const communities = _.group(data, r => r.intermediateCommunityIds[idx]);
			const counts = _.keys(communities).length;
			return counts;
		}
	);
	const metadata = {
		intermediateCommunities,
		communityCount,
		intermediateCounts
	};
	return metadata;
};

export const histogram = (data, { interval=10 }={}) => {
	const count = idx => _.reduce(
		data,
		(acc, curr) => {
			const community = curr.intermediateCommunityIds[idx];
			acc[community] = community in acc ? acc[community] + 1 : 1;
			return acc;
		},
		{}
	);
	const bin = frequencies => _.reduce(
		_.pairs(frequencies),
		(acc, [__, val]) => {
			const bin_ = Math.floor(val / interval) * interval;
			acc[bin_] = bin_ in acc ? acc[bin_] + 1 : 1;
			return acc;
		},
		{}
	);

	const levels = data[0].intermediateCommunityIds.length;
	const counts = _.reduce(
		_.range(0, levels),
		(acc, idx) => ({ ...acc, [idx]: count(idx)}),
		{}
	);
	const bins = _.mapValues(
		counts,
		c => bin(c, interval)
	);
	return bins;
};

const objectToString = object => _.reduce(
	_.pairs(object),
	(acc, [key, value]) => `${acc.length ? `${acc},` : ''} ${key}: ${value}`,
	''
);

const generateCommand = (graph, options) => `
CALL gds.louvain.stream('${graph}', { ${objectToString(options)} })
YIELD nodeId, communityId, intermediateCommunityIds
RETURN gds.util.asNode(nodeId).URI AS URI, communityId, intermediateCommunityIds
ORDER BY communityId ASC
`;

export const stream = async (graph, options) => {
	const [session, driver] = await getSession();
	const command = generateCommand(graph, options);
	const result = session.run(command);
	const data = await promisify(result, session, driver);

	return data;
};
