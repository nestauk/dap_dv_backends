import * as _ from 'lamb';

import { query } from 'sparql/query.mjs';

/**
 * @function getEntityDetails
 * @description provides details such as imageURL and abstract for supplied DBpedia URIs
 * @param {String|String[]} input - a single DBpedia URI or a list of URIs.
 * @returns a list of entities for the supplied DBPedia URIs.
 */
export const getEntityDetails = async input => {
	const dbr = 'http://dbpedia.org/resource';
	const URIs = typeof input === 'string' ? [input] : input;
	const sanitizedURIs = _.map(URIs, URI =>
	    URI.charAt(0) !== '<'
			? URI.startsWith(dbr) ? `<${URI}>` : `<${dbr}/${URI}>`
			: URI
	);
	const individualQueries = _.map(sanitizedURIs, URI =>
		`{
			BIND (${URI} as ?URI)
			OPTIONAL { 
				${URI} dbo:abstract ?abstract .
				FILTER (langMatches(lang(?abstract),"en"))
			}
			OPTIONAL { ${URI} prov:wasDerivedFrom ?derivedFrom . }
			OPTIONAL { ${URI} dbo:thumbnail ?imageURL . }
		}`,
	);
	const body = _.join(individualQueries, '\nUNION\n');
	const sparql = `
    PREFIX dbo: <http://dbpedia.org/ontology/>
    PREFIX dbr: <http://dbpedia.org/resource/>
    PREFIX prov: <http://www.w3.org/ns/prov#>
    SELECT * WHERE {
        ${body}
    }`;

	const { results } = await query(sparql);
	const values = _.map(results.bindings, row =>
    	_.mapValues(row, contents => contents.value)
	);

	// filter out bad encodings
	const filteredValues = _.map(values, entity => {
		if ('imageURL' in entity) {
			if (entity.imageURL.includes('ï¿½')) {
				const { imageURL, ...rest } = entity;
				return rest;
			}
		}
		return entity;
	});

	return filteredValues;
};
