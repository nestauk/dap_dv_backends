import * as _ from 'lamb'
import { getValue, join, trim } from '@svizzle/utils'
import { logger } from 'logging/logging.mjs'

/* String Functions */

export const toLowerString = v => v.toString().toLowerCase()

// tag function to dedent template literals
export const dedent = _.pipe([
    _.head, // first argument is strings
    _.splitBy('\n'),
    _.mapWith(trim),
    _.joinWith('\n'),
    trim 
])

export const concatenateStringifyObjectValues= _.pipe([
    _.values,
    _.mapWith(toLowerString),
    join
])

/* Spotlight */

export const uniquesByStringifiedObjectValues =
    _.uniquesBy(concatenateStringifyObjectValues)

/* Promises */

const logErrors = v => {
	if (v.status === 'rejected') {
		logger.error(v.reason);
	}
	return v;
};
const removeErrors = v => v.status !== 'rejected';

export const promisesHandler = async promises => {
	return (await Promise.allSettled(promises))
		.map(logErrors)
		.filter(removeErrors)
		.map(getValue);
};


