import * as _ from 'lamb'
import { getValue, join, trim, isNotNil } from '@svizzle/utils'
import { logger } from 'logging/logging.mjs'

/* String Functions */

export const toLowerString = v => v.toString().toLowerCase()

// tag function to dedent template literals
export const dedent = _.pipe([
	_.head, // first argument is strings
	_.splitBy('\n'),
	_.mapWith(trim),
	_.joinWith('\n'),
	trim
])

/* Array Functions */

const _batch = (arr, batchSize) => {
	return arr.map((_, i) => {
		if (i % batchSize === 0) {
			return arr.slice(i, i + batchSize);
		}
	});
};
export const batch = _.pipe([_batch, _.filterWith(isNotNil)]);

/* Spotlight */

export const uniquesByURI =
	_.uniquesBy(_.getKey('URI'))

/* Promises */

const logErrors = v => {
	if (v.status === 'rejected') {
		logger.error(v.reason);
	}
	return v;
};
const removeErrors = v => v.status !== 'rejected';

export const promisesHandler = async (promises) => {
	return (await Promise.allSettled(promises))
		.map(logErrors)
		.filter(removeErrors)
		.map(getValue);
};
